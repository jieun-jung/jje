1. computeIfAbsent

    Map<String, Map<String, Long>> groupByCertStatusByDay = new HashMap<>();
    for (CertEntity s : certList) {
        String crtDd = new SimpleDateFormat("dd").format(s.getChgDt());
        String status = CertStatusCodeEnum.getStatusCodeValue(s.getCertStatus(), user.getAuthority());
        groupByCertStatusByDay.computeIfAbsent(crtDd, key -> new HashMap<>()).merge(status, 1L, Long::sum);  --ex) groupByCertStatusByDay: key:1 (=day), value=2 (=Long::sum)
    }
    
    ==>
    computeIfAbsent는 두개의 입력값을 받는다. 
    첫번째는 key이고 두번째는 key를 사용하여 차례데로 value를 반환하는 함수형 인터페이스이다. 
    map에 key가 있으면 값을 반환한다는 아이디어이다. 
    그렇지 않다면, value를 계산하고 map에 추가를 한후에 value를 돌려줄것이다.
    
    private BigInteger fibonacci (int n) {
      return memoizeHashMap.computeIfAbsent(n, 
               (key) -> fibonacci(n - 1).add(fibonacci(n - 2)));
    }

2. putIfAbsent() 
  computeIfAbsent 는 key가 있어야 계산을 하지만 putIfAbsent는 바로 value를 가져올 수 있다.
  
  productPrice.putIfAbsent("Fish", 4.5);
  
<참고>
http://tech.javacafe.io/2018/12/03/HashMap/
